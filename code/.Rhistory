util$PosixTime <- as.POSIXct(util$Timestamp,format="%d/%m/%Y %H:%M")
head(util,n=10)
util$Timestamp <- NULLhead(util,n=10)
util$Timestamp <- NULL
head(util,n=10)
util <- util[,c(4,1,2,3)]
head(util,n=10)
PL1 <- util[util$Machine=="RL1",]
RL1$Machine <- factor(RL1$Machine)
RL1 <- util[util$Machine=="RL1",]
RL1$Machine <- factor(RL1$Machine)
RL1
#calculate stats
util_stats_rl1 <- c(min(RL1$Utilization,na.rm=TRUE),
mean(RL1$Utilization,na.rm=TRUE),
max(RL1$Utilization,na.rm=TRUE))
util_stats_rl1
RL1$Utilization<90
RL1[RL1$Utilization<90]
RL1[RL1$Utilization<90,]
which(RL1$Utilization<90)
which(RL1$Utilization<0.90)
length(which(RL1$Utilization<0.90))
#check the poistions of cells under 90% of utilizations
length(which(RL1$Utilization<0.90))>0
#check the poistions of cells under 90% of utilizations
util_under_90 <- length(which(RL1$Utilization<0.90))>0
util_under_90
#check the poistions of cells under 90% of utilizations
util_under_90_flag <- length(which(RL1$Utilization<0.90))>0
util_under_90_flag
#create the list for project
list_rl1 <- list("RL1",util_stats_rl1,util_under_90_flag)
list_rl1
#name component of a list
names(list_rl1)
#name component of a list
names(list_rl1)#doesnt have any name
names(list_rl1) <- c("Machine","Stats","LowThreshold")
list_rl1
list_rl1 <- list(Machine="RL1",
Stats=util_stats_rl1,
LowThresholdutil_under_90_flag)
#another way to name elements of a list
list_rl1 <- list(Machine="RL1",
Stats=util_stats_rl1,
LowThreshold=util_under_90_flag)
list_rl1
list_rl1[Machine]
list_rl1["Machine"]
list_rl1$Machine
is.list(list_rl1)
is.vector(list_rl1)
#extract info from list I.
#[] <- always return a list
list_rl1[1]
#extract info from list II.
#[[]] <- will return the actual object
list_rl1[[1]]
#extract info from list III.
#$ <- same as [[]], but prettier
list_rl1$Machine
#access third element of a vector (max utilization)
list_rl1[[2]]
#access third element of a vector (max utilization)
list_rl1[[2]][2]
#access third element of a vector (max utilization)
list_rl1[[2]][3]
list_rl1$Stats[3]
list_rl1[[2]][3]
list_rl1$Stats[3]
list_rl1
list_rl1[4] <- "New Information"
list_rl1
#another way to add component <- add all hours where utilization os unknown
RL1[is.na(RL1$Utilization)]
#another way to add component <- add all hours where utilization os unknown
RL1[is.na(RL1$Utilization),]
is.na(RL1$Utilization)
#another way to add component <- add all hours where utilization os unknown
RL1[is.na(RL1$Utilization),"PosixTime"]
#another way to add component <- add all hours where utilization os unknown
list_rl1$UnknownHours <- RL1[is.na(RL1$Utilization),"PosixTime"]
list_rl1
list_rl1[15] <- "New Information"
list_rl1
list_rl1[4] <- "New Information"
list_rl1
list_rl1 <- list("RL1",util_stats_rl1,util_under_90_flag)
list_rl1
list_rl1
list_rl1[4] <- "New Information"
list_rl1
list_rl1 <- list(Machine="RL1",
Stats=util_stats_rl1,
LowThreshold=util_under_90_flag)
list_rl1
list_rl1
list_rl1[4] <- "New Information"
list_rl1
list_rl1$UnknownHours <- RL1[is.na(RL1$Utilization),"PosixTime"]
list_rl1
#delete element from list
list_rl1[4] <- NULL
list_rl1
#add df to list
RL1
list_rl1$Data <- RL1
list_rl1
#subsetting list
list_rl1[1:3]
#subsetting list
list_rl1[1:6]
#subsetting list <- access the first element of UnknownHours
list_rl1
#subsetting list <- access the first element of UnknownHours
list_rl1$UnknownHours[1]
list_rl1[[3]]
list_rl1[[4]]
list_rl1[[4]][1]
#subsetting list <- access the first element of UnknownHours in two versions
list_rl1$UnknownHours[1]
list_rl1[[4]][1]
#subsetting list
list_rl1[c(1:10)]
#subsetting list
list_rl1[1]
#subsetting list
list_rl1[1:2]
#subsetting list
typeof(list_rl1[1:2])
#visualization
library(ggplot2)
plot <- ggplot(data=util)
plot+geom_line(aes(x=PosixTime,y=Utilization))
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine))
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90,
color="Gray",
size=1.2)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90,
color="Gray",
size=1.2,
linetype=3)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90,
color="Gray")
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90,
color="Gray",
size=1.2)
Chicago <- read.csv("/Users/birobalint/Downloads/Weather Data/Chicago-F.csv",
row.names=1)
head(Chicago)
Chicago <- read.csv("/Users/birobalint/Downloads/Weather Data/Chicago-F.csv",
row.names=1)
NewYork <- read.csv("/Users/birobalint/Downloads/Weather Data/NewYork-F.csv",
row.names=1)
Houston <- read.csv("/Users/birobalint/Downloads/Weather Data/Houston-F.csv",
row.names=1)
SanFrancisco <- read.csv("/Users/birobalint/Downloads/Weather Data/SanFrancisco-F.csv",
row.names=1)
head(Chicago,n=2)
head(NewYork,n=2)
head(Houston,n=2)
head(SanFrancisco,n=2)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
is.matrix(Chicago)
is.matrix(NewYork)
is.matrix(Houston)
is.matrix(SanFrancisco)
#load matrices into a list
Weather <- list(Chicago=Chicago,
NewYork=NewYork,
Houston=Houston,
SanFrancisco=SanFrancisco)
#test our list
Weather[[3]]
#test our list
Weather[3]
#test our list
Weather$Houston
?apply
apply(x=Chicago,
MARGIN=1,
FUN=mean())
apply(Chicago,
MARGIN=1,
FUN=mean())
apply(Chicago,1,mean)
apply(Chicago,1,mean())
apply(x=Chicago,MARGIN=1,FUN=mean)
apply(x=Chicago,margin=1,fun=mean)
apply(Chicago,margin=1,fun=mean)
apply(Chicago,1,fun=mean)
apply(Chicago,1,mean)
#the syntax is apply(matrix, row/column, function)
apply(Chicago,1,max)
#the syntax is apply(matrix, row/column, function)
apply(Chicago,1,min)
apply(Chicago,1,mean)
apply(NewYork,1,mean)
apply(Houston,1,mean)
apply(SanFrancisco,1,mean)
#read data
Chicago <- read.csv("/Users/birobalint/Downloads/Weather Data/Chicago-F.csv",
row.names=1)
NewYork <- read.csv("/Users/birobalint/Downloads/Weather Data/NewYork-F.csv",
row.names=1)
Houston <- read.csv("/Users/birobalint/Downloads/Weather Data/Houston-F.csv",
row.names=1)
SanFrancisco <- read.csv("/Users/birobalint/Downloads/Weather Data/SanFrancisco-F.csv",
row.names=1)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#load matrices into a list
Weather <- list(Chicago=Chicago,
NewYork=NewYork,
Houston=Houston,
SanFrancisco=SanFrancisco)
Chicago
t(Chicago)
#apply transpose t() function to all elements of my Weather list
list(t(Weather$Chicago)
t(Weather$NewYork)
#apply transpose t() function to all elements of my Weather list
list(t(Weather$Chicago),
t(Weather$NewYork),
t(Weather$Houston),
t(Weather$SanFrancisco))
#apply transpose t() function to all elements of my Weather list
lapply(Weather,t)
list(t(Weather$Chicago),
t(Weather$NewYork),
t(Weather$Houston),
t(Weather$SanFrancisco))==lapply(Weather,t)
lapply(Weather, rbind, NewRow=1:12)
#using lapply with []
lapply(Weather, "[",1,1)
#using lapply with []
lapply(Weather, "[",1,)
#read data
Chicago <- read.csv("/Users/birobalint/Downloads/Weather Data/Chicago-F.csv",
row.names=1)
NewYork <- read.csv("/Users/birobalint/Downloads/Weather Data/NewYork-F.csv",
row.names=1)
Houston <- read.csv("/Users/birobalint/Downloads/Weather Data/Houston-F.csv",
row.names=1)
SanFrancisco <- read.csv("/Users/birobalint/Downloads/Weather Data/SanFrancisco-F.csv",
row.names=1)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#load matrices into a list
Weather <- list(Chicago=Chicago,
NewYork=NewYork,
Houston=Houston,
SanFrancisco=SanFrancisco)
lapply(Weather,function(x) x[1,])
#in this case x is an element of a list
lapply(Weather,function(x) x)
#in this case x is an element of a list
lapply(Weather,function(x) x[1,] - x[2,])
#read data
Chicago <- read.csv("/Users/birobalint/Downloads/Weather Data/Chicago-F.csv",
row.names=1)
NewYork <- read.csv("/Users/birobalint/Downloads/Weather Data/NewYork-F.csv",
row.names=1)
Houston <- read.csv("/Users/birobalint/Downloads/Weather Data/Houston-F.csv",
row.names=1)
SanFrancisco <- read.csv("/Users/birobalint/Downloads/Weather Data/SanFrancisco-F.csv",
row.names=1)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#load matrices into a list
Weather <- list(Chicago=Chicago,
NewYork=NewYork,
Houston=Houston,
SanFrancisco=SanFrancisco)
Weather
lapply(Weather,"[",1,7)
#AvgHigh_F for July with sapply() function
sapply(Weather,"[",1,7)
lapply(Weather,"[",1,10:12)
sapply(Weather,"[",1,10:12)
lapply(Weather,"[",1,10:12)
sapply(Weather,"[",1,10:12)
lapply(Weather,function(x) round((z[1,]-z[2,])/z[2,],2))
lapply(Weather,function(x) round((x[1,]-z[2,])/z[2,],2))
lapply(Weather,function(x) round((x[1,]-x[2,])/x[2,],2))
lapply(Weather,function(x) round((x[1,]-x[2,])/x[2,],2))
sapply(Weather,function(x) round((x[1,]-x[2,])/x[2,],2))
#it is possible to unable sapply() from simplification
#in this case it behaves as lapply() function
lapply(Weather,function(x) round((x[1,]-x[2,])/x[2,],2))
sapply(Weather,function(x) round((x[1,]-x[2,])/x[2,],2), simplify=FALSE)
#read data
Chicago <- read.csv("/Users/birobalint/Downloads/Weather Data/Chicago-F.csv",
row.names=1)
NewYork <- read.csv("/Users/birobalint/Downloads/Weather Data/NewYork-F.csv",
row.names=1)
Houston <- read.csv("/Users/birobalint/Downloads/Weather Data/Houston-F.csv",
row.names=1)
SanFrancisco <- read.csv("/Users/birobalint/Downloads/Weather Data/SanFrancisco-F.csv",
row.names=1)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#load matrices into a list
Weather <- list(Chicago=Chicago,
NewYork=NewYork,
Houston=Houston,
SanFrancisco=SanFrancisco)
Chicago
apply(Chicago,1,max)
#we would like to apply the above line to all the list elements
lapply(Weather,apply,1,max)
#this is identical of the above mentioned line (maybe a bit easier to understand!)
lapply(Weather, function(x) apply(x,1,max))
library(biomaRt)
ensembl <- useEnsembl(biomart='genes',
mirror='useast')
head(listDatasets(ensembl))
ensembl <- useEnsembl(biomart='genes',
dataset='btaurus_gene_ensembl'
mirror='useast')
ensembl <- useEnsembl(biomart='genes',
dataset='btaurus_gene_ensembl',
mirror='useast')
head(listAttributes(ensembl))
listAttributes(ensembl)
gene_counts <- read.csv('../results/gene_counts.csv')
getcwd()
getwd()
setwd('/Users/birobalint/Documents/Projects/lda_rna_seq/code/')
gene_counts <- read.csv('../results/gene_counts.csv')
head(gene_counts)
gene_counts <- read.csv('../results/gene_counts.csv',
header=TRUE)
gene_counts
gene_counts <- read.csv('../results/gene_counts.csv',
header=TRUE,
row.names=NULL)
gene_counts
gene_counts[,gene_id]
gene_counts[,'gene_id']
gene_counts$gene_id
#create ensembl query
ensembl <- useEnsembl(biomart='genes',
dataset='btaurus_gene_ensembl',
mirror='useast')
#get data
data <- getBM(attributes=c('external_gene_name'),
filters=c('ensembl_gene_id'),
values=gene_counts$gene_id)
#get data
data <- getBM(attributes=c('external_gene_name'),
filters=c('ensembl_gene_id'),
values=gene_counts$gene_id,
mart=ensembl)
data
#get data
gene_names <- getBM(attributes=c('external_gene_name'),
filters=c('ensembl_gene_id'),
values=gene_counts$gene_id,
mart=ensembl)
View(data)
len(gene_names)
length(gene_names)
length(as.list(gene_names  ))
length(unlist(gene_names  ))
gene_counts$gene_names <- gene_names
sapply(gene_counts$gene_id, get_genes)
get_genes <- function(ensembl_gene_id){
gene <- getBM(attributes=c('external_gene_name'),
filters=c('ensembl_gene_id'),
values=ensembl_gene_id,
mart=ensembl)
return(gene)
}
sapply(gene_counts$gene_id, get_genes)
get_genes <- function(ensembl_gene_id){
gene <- getBM(attributes=c('external_gene_name'),
filters=c('ensembl_gene_id'),
values=ensembl_gene_id,
mart=ensembl)
return(gene)
}
sapply(gene_counts$gene_id, get_genes)
#get data
gene_names <- getBM(attributes=c('external_gene_name'),
filters=c('ensembl_gene_id'),
values=gene_counts$gene_id,
mart=ensembl)
gene_names
'MLN' in gene_names
'MLN' %in% gene_names
'MLNR' %in% gene_names
'EGF' %in% gene_names
'MDN1' %in% gene_names
typeof(gene_names)
class(gene_names)
head(gene_names)
gene_names
unlist(gene_names)
#get data
gene_names <- getBM(attributes=c('external_gene_name','ensembl_gene_id'),
filters=c('ensembl_gene_id'),
values=gene_counts$gene_id,
mart=ensembl)
gene_names
gene_names$external_gene_name
#add external_gene_name to gene_counts as a column
gene_counts$gene_name <- gene_names
head(gene_counts)
#add external_gene_name to gene_counts as a column
gene_counts$gene_name <- gene_names$external_gene_name
head(gene_counts)
#add external_gene_name to gene_counts as a column
gene_counts$gene_name <- as.list(gene_names$external_gene_name)
head(gene_counts)
head(gene_counts)
#add external_gene_name to gene_counts as a column
gene_counts$gene_name <- gene_names$external_gene_name
head(gene_counts)
#write output
data_new1 <- gene_counts[ , c("gene_name",    # Reorder data frame
names(gene_counts)[names(gene_counts) != "gene_name"])]
data_new1
#reorder columns-so gene names will be in the first position
gene_counts <- gene_counts[ , c("gene_name",
names(gene_counts)[names(gene_counts) != "gene_name"])]
head(gene_counts)
#write output
write.csv('../results/gene_names_counts.csv')
#write output
write.csv(x=gene_counts,
file='../results/gene_names_counts.csv')
read.csv('../results/gene_names_counts.csv')
#write output
write.csv(x=gene_counts,
file='../results/gene_names_counts.csv',
row.names=FALSE)
read.csv('../results/gene_names_counts.csv')
library(DESeq2)
install.packages("BiocManager")
BiocManager::install("DESeq2")
#installation of DESEQ2
BiocManager::install("DESeq2")
library(DESeq2)
