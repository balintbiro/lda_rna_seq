original_gene_list <- res$log2FoldChange
original_gene_list
head(res)
rownames(res)
names(original_gene_list) <- rownames(res)
original_gene_list
# omit any NA values
gene_list<-na.omit(original_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
gene_list
#gsea
gse <- gseGO(geneList=gene_list,
ont ="ALL",
keyType = "ENSEMBL",
nPerm = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = organism,
pAdjustMethod = "none")
dotplot(gse, showCategory=10, split=".sign") + facet_grid(.~.sign)
#enrichment map
emapplot(gse, showCategory = 10)
gse
#enrichment map
emapplot(gse, showCategory = 10)
#enrichment map
pairwise_termsim(gse) emapplot(x2)
#enrichment map
req <- pairwise_termsim(gse)
emapplot(req)
install.packages("ggnewscale")
library(ggnewscale)
install.packages("ggnewscale")
#enrichment map
req <- pairwise_termsim(gse)
emapplot(req)
install.packages("ggnewscale")
#enrichment map
req <- pairwise_termsim(gse)
emapplot(req)
#ridgeplot
ridgeplot(gse) + labs(x = "enrichment distribution")
install.packages("ggridges")
library(ggridges)
#ridgeplot
ridgeplot(gse) + labs(x = "enrichment distribution")
#gsea plot
gseaplot(gse, by = "all", title = gse$Description[1], geneSetID = 1)
#create heatmap
vstable <- as.data.frame(assay(vs_cond_data))
vstable_rowsum <- transform(vstable,sum=rowSums(vstable))
selected <- order(vstable_rowsum$sum, decreasing = TRUE)[1:50]
heatmap.2(as.matrix(vstable[selected,]), row=FALSE, dendrogram = 'column', col=redgreen(75),
key=TRUE, keysize=1.5,
density.info = 'none',trace='none',cexCol = 0.9,labRow = NA)
#create heatmap
vstable <- as.data.frame(assay(vs_cond_data))
vstable_rowsum <- transform(vstable,sum=rowSums(vstable))
selected <- order(vstable_rowsum$sum, decreasing = TRUE)[1:500]
heatmap.2(as.matrix(vstable[selected,]), row=FALSE, dendrogram = 'column', col=redgreen(75),
key=TRUE, keysize=1.5,
density.info = 'none',trace='none',cexCol = 0.9,labRow = NA)
#create heatmap
vstable <- as.data.frame(assay(vs_cond_data))
vstable_rowsum <- transform(vstable,sum=rowSums(vstable))
selected <- order(vstable_rowsum$sum, decreasing = TRUE)[1:800]
heatmap.2(as.matrix(vstable[selected,]), row=FALSE, dendrogram = 'column', col=redgreen(75),
key=TRUE, keysize=1.5,
density.info = 'none',trace='none',cexCol = 0.9,labRow = NA)
heatmap.2(as.matrix(vstable[selected,]), row=FALSE, dendrogram = 'column', col=redgreen(75),
key=TRUE, keysize=1.5,
density.info = 'none',trace='none',cexCol = 0.9,labRow = NA,
col="heat.colors")
heatmap.2(as.matrix(vstable[selected,]), row=FALSE, dendrogram = 'column', col="heat.colors",
key=TRUE, keysize=1.5,
density.info = 'none',trace='none',cexCol = 0.9,labRow = NA)
selected <- order(vstable_rowsum$sum, decreasing = TRUE)[1:8000]
heatmap.2(as.matrix(vstable[selected,]), row=FALSE, dendrogram = 'column', col="heat.colors",
key=TRUE, keysize=1.5,
density.info = 'none',trace='none',cexCol = 0.9,labRow = NA)
heatmap.2(as.matrix(vstable[selected,]), row=FALSE, dendrogram = 'column', col=redgreen(75),
key=TRUE, keysize=1.5,
density.info = 'none',trace='none',cexCol = 0.9,labRow = NA)
selected <- order(vstable_rowsum$sum, decreasing = TRUE)[1:8000]
heatmap.2(as.matrix(vstable[selected,]), row=FALSE, dendrogram = 'column', col=redgreen(75),
key=TRUE, keysize=1.5,
density.info = 'none',trace='none',cexCol = 0.9,labRow = NA)
selected <- order(vstable_rowsum$sum, decreasing = TRUE)[1:80000]
heatmap.2(as.matrix(vstable[selected,]), row=FALSE, dendrogram = 'column', col=redgreen(75),
key=TRUE, keysize=1.5,
density.info = 'none',trace='none',cexCol = 0.9,labRow = NA)
selected <- order(vstable_rowsum$sum, decreasing = TRUE)[1:10000]
heatmap.2(as.matrix(vstable[selected,]), row=FALSE, dendrogram = 'column', col=redgreen(75),
key=TRUE, keysize=1.5,
density.info = 'none',trace='none',cexCol = 0.9,labRow = NA)
library(pheatmap)
install.packages('pheatmap')
library(pheatmap)
selection <- order(rowMeans(counts(d.dds, normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition","age","genotype1")])
df
df <- as.data.frame(colData(d.dds)[,c("condition","age","genotype1")])
df
ntd <- normTransform(d.dds)
pheatmap(assay(ntd)[selection,],cluster_rows = FALSE, show_rownames = FALSE,
cluster_cols = FALSE, annotation_col = df)
pheatmap(assay(ntd)[selection,],cluster_rows = FALSE, show_rownames = FALSE,
cluster_cols = TRUE, annotation_col = df)
df <- as.data.frame(colData(d.dds)[,c("condition","age","genotype1","genotype2")])
pheatmap(assay(ntd)[selection,],cluster_rows = FALSE, show_rownames = FALSE,
cluster_cols = TRUE, annotation_col = df)
df <- as.data.frame(colData(d.dds)[,c("condition","age","genotype1")])
pheatmap(assay(ntd)[selection,],cluster_rows = FALSE, show_rownames = FALSE,
cluster_cols = TRUE, annotation_col = df)
selection <- order(rowMeans(counts(d.dds, normalized=TRUE)),
decreasing=TRUE)[1:200]
pheatmap(assay(ntd)[selection,],cluster_rows = FALSE, show_rownames = FALSE,
cluster_cols = TRUE, annotation_col = df)
pheatmap(assay(ntd)[selection,],cluster_rows = TRUE, show_rownames = FALSE,
cluster_cols = TRUE, annotation_col = df)
pheatmap(assay(ntd)[selection,],cluster_rows = TRUE, show_rownames = FALSE,
cluster_cols = TRUE, color=colorRampPalette(c("navy", "white", "red"))(50))
annotation_col = df
pheatmap(assay(ntd)[selection,],cluster_rows = TRUE, show_rownames = FALSE,
cluster_cols = TRUE, annotation_col = df)
selection <- order(rowMeans(counts(d.dds, normalized=TRUE)),
decreasing=TRUE)[1:20000]
df <- as.data.frame(colData(d.dds)[,c("condition","age","genotype1")])
pheatmap(assay(ntd)[selection,],cluster_rows = TRUE, show_rownames = FALSE,
cluster_cols = TRUE, annotation_col = df)
#enrichment map
req <- pairwise_termsim(gse)
emapplot(req)
#ridgeplot
ridgeplot(gse) + labs(x = "enrichment distribution")
#get gene names from Ensembl gene id
#create Ensembl query
ensembl <- useEnsembl(biomart='genes',
dataset='btaurus_gene_ensembl',
mirror='useast')
#get data
gene_names <- getBM(attributes=c('external_gene_name','ensembl_gene_id'),
filters=c('ensembl_gene_id'),
values=gene_counts$gene_id,
mart=ensembl)
res <- results(d.dds,
contrast=c('condition','lda','non_lda'))
res <- lfcShrink(d.dds,
contrast=c('condition','lda','non_lda'),
res=res,
type='normal')
#visualize volcano plot
EnhancedVolcano(res,
lab=gene_names$external_gene_name,
x='log2FoldChange',
y='pvalue',
xlim=c(-6,6),
ylim=c(0,10))
#gsea https://learn.gencore.bio.nyu.edu/rna-seq-analysis/gene-set-enrichment-analysis/
organism = "org.Bt.eg.db"
#BiocManager::install(organism, character.only = TRUE)
library(organism, character.only = TRUE)
#get fc values
original_gene_list <- res$log2FoldChange
#name gene list
names(original_gene_list) <- rownames(res)
# omit any NA values
gene_list<-na.omit(original_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
#gsea
gse <- gseGO(geneList=gene_list,
ont ="ALL",
keyType = "ENSEMBL",
nPerm = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = organism,
pAdjustMethod = "none")
dotplot(gse, showCategory=10, split=".sign") + facet_grid(.~.sign)
#enrichment map
req <- pairwise_termsim(gse)
emapplot(req)
#ridgeplot
ridgeplot(gse) + labs(x = "enrichment distribution")
#gsea plot
gseaplot(gse, by = "all", title = gse$Description[1], geneSetID = 1)
rbind(rep(0,10),
c(rep(2,3),rep(4,3),rep(4,4)),
rep(1,10),
rep(0,10))
proba <- rbind(rep(0,10),
c(rep(2,3),rep(4,3),rep(4,4)),
rep(1,10),
rep(0,10))
proba[>0]
proba[apply(proba[,-1], 1, function(x) !all(x==0)),]
df
assay(ntd)
d.dds
assay(ntd)
ntd
zeroless_input <- assay(ntd)
zeroless_input <- assay(ntd)
zeroless_input <- zeroless_input[apply(zeroless_input[,-1], 1, function(x) !all(x==0)),]
zeroless_input
#generate heatmap without full zero rows
zeroless_input <- assay(ntd)
zeroless_input <- zeroless_input[apply(zeroless_input[,-1], 1, function(x) !all(x==0)),]
pheatmap(zeroless_input[selection,],cluster_rows = TRUE, show_rownames = FALSE,
cluster_cols = TRUE, annotation_col = df)
#generate heatmap without full zero rows
selection <- order(rowMeans(counts(d.dds, normalized=TRUE)),
decreasing=TRUE)
zeroless_input <- assay(ntd)
zeroless_input <- zeroless_input[apply(zeroless_input[,-1], 1, function(x) !all(x==0)),]
pheatmap(zeroless_input[selection,],cluster_rows = TRUE, show_rownames = FALSE,
cluster_cols = TRUE, annotation_col = df)
selection
assay(ntd)[selection,]
gene_counts
selection
#heatmap of count matrix https://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html
ntd <- normTransform(d.dds)
selection <- order(rowMeans(counts(d.dds, normalized=TRUE)),
decreasing=TRUE)
df <- as.data.frame(colData(d.dds)[,c("condition","age","genotype1")])
pheatmap(assay(ntd)[selection,],cluster_rows = TRUE, show_rownames = FALSE,
cluster_cols = TRUE, annotation_col = df)
non_zero_gene_counts <- gene_counts[gene_counts(gene_counts[,-1], 1, function(x) !all(x==0)),]
non_zero_gene_counts <- gene_counts[apply(gene_counts[,-1], 1, function(x) !all(x==0)),]
non_zero_gene_counts
#remove rows where every item is zero
non_zero_gene_counts <- gene_counts[apply(gene_counts[,-1], 1, function(x) !all(x==0)),]
dds <- DESeqDataSetFromMatrix(countData=non_zero_gene_counts,
colData=metadata,
design=~condition, tidy=TRUE)
d.dds <- DESeq(dds)
ntd <- normTransform(d.dds)
selection <- order(rowMeans(counts(d.dds, normalized=TRUE)),
decreasing=TRUE)
df <- as.data.frame(colData(d.dds)[,c("condition","age","genotype1")])
pheatmap(assay(ntd)[selection,],cluster_rows = TRUE, show_rownames = FALSE,
cluster_cols = TRUE, annotation_col = df)
head(dds)
d.dds
dotplot(gse, showCategory=10, split=".sign")
+facet_grid(.~.sign)
#gsea https://learn.gencore.bio.nyu.edu/rna-seq-analysis/gene-set-enrichment-analysis/
organism = "org.Bt.eg.db"
#BiocManager::install(organism, character.only = TRUE)
library(organism, character.only = TRUE)
#get fc values
original_gene_list <- res$log2FoldChange
#name gene list
names(original_gene_list) <- rownames(res)
# omit any NA values
gene_list<-na.omit(original_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
#gsea
gse <- gseGO(geneList=gene_list,
ont ="ALL",
keyType = "ENSEMBL",
nPerm = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = organism,
pAdjustMethod = "none")
dotplot(gse, showCategory=10, split=".sign")
+facet_grid(.~.sign)
#gsea https://learn.gencore.bio.nyu.edu/rna-seq-analysis/gene-set-enrichment-analysis/
organism = "org.Bt.eg.db"
#BiocManager::install(organism, character.only = TRUE)
library(organism, character.only = TRUE)
#get fc values
original_gene_list <- res$log2FoldChange
#name gene list
names(original_gene_list) <- rownames(res)
# omit any NA values
gene_list<-na.omit(original_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
#gsea
gse <- gseGO(geneList=gene_list,
ont ="ALL",
keyType = "ENSEMBL",
nPerm = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = organism,
pAdjustMethod = "none")
#load required libraries
library(DESeq2)
library(gplots)
library(biomaRt)
library(ggplot2)
library(pheatmap)
library(pathview)
library(ggridges)
library(ggnewscale)
library(enrichplot)
library(EnhancedVolcano)
library(clusterProfiler)
#get working directory
if (getwd()!="/Users/birobalint/Documents/Projects/lda_rna_seq/code/"){
setwd("/Users/birobalint/Documents/Projects/lda_rna_seq/code/")
}
print(getwd())
#load data
gene_counts <- read.csv('../results/gene_counts.csv',
sep=',')
colnames(gene_counts) <- c('gene_id','1','2','3','4','6','7','8','9')
head(gene_counts)
#create metadata table
metadata <- as.data.frame(cbind(idx=colnames(gene_counts)[c(-1)],
condition=c('non_lda','lda','non_lda','lda','lda','lda','lda','lda'),
age=c('a','a','a','a','j','j','j','j'),
genotype1=c('T/C','T/C','T/C','T/C','T/C','T/T','C/C','C/C'),
genotype2=c('HE','HE','HE','HE','HE','WT','HO','HO')))
metadata
#create deseq matrix for condition
dds <- DESeqDataSetFromMatrix(countData=gene_counts,
colData=metadata,
design=~condition, tidy=TRUE)
d.dds <- DESeq(dds)
#transofrm deseq data
vs_cond_data <- varianceStabilizingTransformation(d.dds)
#visualize PCA
plotPCA(vs_cond_data,intgroup=c('condition'))
#heatmap of count matrix https://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html
ntd <- normTransform(d.dds)
selection <- order(rowMeans(counts(d.dds, normalized=TRUE)),
decreasing=TRUE)
df <- as.data.frame(colData(d.dds)[,c("condition","age","genotype1")])
pheatmap(assay(ntd)[selection,],cluster_rows = TRUE, show_rownames = FALSE,
cluster_cols = TRUE, annotation_col = df)
#get gene names from Ensembl gene id
#create Ensembl query
ensembl <- useEnsembl(biomart='genes',
dataset='btaurus_gene_ensembl',
mirror='useast')
#get data
gene_names <- getBM(attributes=c('external_gene_name','ensembl_gene_id'),
filters=c('ensembl_gene_id'),
values=gene_counts$gene_id,
mart=ensembl)
res <- results(d.dds,
contrast=c('condition','lda','non_lda'))
res <- lfcShrink(d.dds,
contrast=c('condition','lda','non_lda'),
res=res,
type='normal')
#visualize volcano plot
EnhancedVolcano(res,
lab=gene_names$external_gene_name,
x='log2FoldChange',
y='pvalue',
xlim=c(-6,6),
ylim=c(0,10))
#gsea https://learn.gencore.bio.nyu.edu/rna-seq-analysis/gene-set-enrichment-analysis/
organism = "org.Bt.eg.db"
#BiocManager::install(organism, character.only = TRUE)
library(organism, character.only = TRUE)
#get fc values
original_gene_list <- res$log2FoldChange
#name gene list
names(original_gene_list) <- rownames(res)
# omit any NA values
gene_list<-na.omit(original_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
#gsea
gse <- gseGO(geneList=gene_list,
ont ="ALL",
keyType = "ENSEMBL",
nPerm = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = organism,
pAdjustMethod = "none")
dotplot(gse, showCategory=10, split=".sign") + facet_grid(.~.sign)
ggplot(gse)
ggplot(gse)+ facet_grid(.~.sign)
ggplot(gse,showCategory=10)+ facet_grid(.~.sign)
ggplot(gse,showCategory=10, split=".sign")+ facet_grid(.~.sign)
dotplot(gse, showCategory=10, split=".sign",ylab='GO terms') + facet_grid(.~.sign)
#gsea https://learn.gencore.bio.nyu.edu/rna-seq-analysis/gene-set-enrichment-analysis/
organism = "org.Bt.eg.db"
#BiocManager::install(organism, character.only = TRUE)
library(organism, character.only = TRUE)
#get fc values
original_gene_list <- res$log2FoldChange
#name gene list
names(original_gene_list) <- rownames(res)
# omit any NA values
gene_list<-na.omit(original_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
#gsea
gse <- gseGO(geneList=gene_list,
ont ="ALL",
keyType = "ENSEMBL",
nPerm = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = organism,
pAdjustMethod = "none")
dotplot(gse, showCategory=10, split=".sign") + facet_grid(.~.sign)
dotplot(gse, showCategory=10, split=".sign") + facet_grid(.~.sign)+
labs(y='GO terms')
dotplot(gse, showCategory=10, split=".sign") + facet_grid(.~.sign)+
labs(y='GO terms')+
theme(axis.text.y=element_text(size=15))
dotplot(gse, showCategory=10, split=".sign") + facet_grid(.~.sign)+
labs(y='GO terms')+
theme(axis.text.y=element_text(size=10))
dotplot(gse, showCategory=10, split=".sign") + facet_grid(.~.sign)+
labs(y='GO terms')+
theme(axis.text.y=element_text(size=8))
#ridgeplot
ridgeplot(gse) + labs(x = "enrichment distribution")+
theme(axis.text.y=element_text(size=8))
#ridgeplot
ridgeplot(gse) + labs(x = "enrichment distribution")+
theme(axis.text.y=element_text(size=6))
#kegg pathview map
kegg_organism="bta"
original_gene_list
ids<-bitr(names(original_gene_list), fromType = "ENSEMBL", toType = "ENTREZID", OrgDb=organism)
ids
#remove duplicated ids
dedup_ids = ids[!duplicated(ids[c("ENSEMBL")]),]
#create a new dataframe consists of the selected ids
df2 = df[df$X %in% dedup_ids$ENSEMBL,]
head(df2)
df2
df2
dedup_ids
df
#create a new dataframe consists of the selected ids
df2 = res[res$X %in% dedup_ids$ENSEMBL,]
df2
res
#create a new dataframe consists of the selected ids
df2 = res[rownames(res) %in% dedup_ids$ENSEMBL,]
df2
#create new column fro ENTREZ IDs
df2$ENTREZ <- dedup_ids$ENTREZID
head(df2)
#create a vector from the gene universe
kegg_gene_list <- df2$log2FoldChange
kegg_gene_list
#name vector with ENTREZ IDs
names(kegg_gene_list) <- df2$ENTREZ
#omit NA values
kegg_gene_list <- na.omit(kegg_gene_list)
kegg_gene_list
# sort the list in decreasing order (required for clusterProfiler)
kegg_gene_list = sort(kegg_gene_list, decreasing = TRUE)
#create gseKEGG object
kk2 <- gseKEGG(geneList     = kegg_gene_list,
organism     = kegg_organism,
nPerm        = 10000,
minGSSize    = 3,
maxGSSize    = 800,
pvalueCutoff = 0.05,
pAdjustMethod = "none",
keyType       = "ncbi-geneid")
kk2
#produce KEGG plot
dme <- pathview(gene.data=kegg_gene_list, pathway.id="bta05200", species = kegg_organism)
#produce KEGG plot
pathview(gene.data=kegg_gene_list, pathway.id="bta05200", species = kegg_organism)
knitr::include_graphics("../results/bta05200.pathview.png")
print(getwd())
#produce KEGG plot
kegg_pathway_output <- pathview(gene.data=kegg_gene_list, pathway.id="bta05200", species = kegg_organism)
kegg_pathway_output <- pathview(gene.data=kegg_gene_list, pathway.id="bta05200", species = kegg_organism)
str(kegg_pathway_output)
head(kegg_pathway_output$plot.data.cpd)
kegg_pathway_output <- pathview(gene.data=kegg_gene_list, pathway.id="bta05200", species = kegg_organism,
kegg.dir='../results/')
str(kegg_pathway_output)
head(kegg_pathway_output$plot.data.cpd)
kegg_gene_list
#produce KEGG plot
kegg_pathway_output <- pathview(gene.data=kegg_gene_list[1:2000], pathway.id="bta05200", species = kegg_organism,
kegg.dir='../results/')
#produce KEGG plot
kegg_pathway_output <- pathview(gene.data=kegg_gene_list[1:2000], pathway.id="bta05200", species = kegg_organism,
kegg.dir='../results/')
str(kegg_pathway_output)
head(kegg_pathway_output$plot.data.cpd)
kegg_pathway_output <- pathview(gene.data=kegg_gene_list[1:200], pathway.id="bta05200", species = kegg_organism,
kegg.dir='../results/')
str(kegg_pathway_output)
head(kegg_pathway_output$plot.data.cpd)
