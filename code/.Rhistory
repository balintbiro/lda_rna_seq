names(list_rl1)
#name component of a list
names(list_rl1)#doesnt have any name
names(list_rl1) <- c("Machine","Stats","LowThreshold")
list_rl1
list_rl1 <- list(Machine="RL1",
Stats=util_stats_rl1,
LowThresholdutil_under_90_flag)
#another way to name elements of a list
list_rl1 <- list(Machine="RL1",
Stats=util_stats_rl1,
LowThreshold=util_under_90_flag)
list_rl1
list_rl1[Machine]
list_rl1["Machine"]
list_rl1$Machine
is.list(list_rl1)
is.vector(list_rl1)
#extract info from list I.
#[] <- always return a list
list_rl1[1]
#extract info from list II.
#[[]] <- will return the actual object
list_rl1[[1]]
#extract info from list III.
#$ <- same as [[]], but prettier
list_rl1$Machine
#access third element of a vector (max utilization)
list_rl1[[2]]
#access third element of a vector (max utilization)
list_rl1[[2]][2]
#access third element of a vector (max utilization)
list_rl1[[2]][3]
list_rl1$Stats[3]
list_rl1[[2]][3]
list_rl1$Stats[3]
list_rl1
list_rl1[4] <- "New Information"
list_rl1
#another way to add component <- add all hours where utilization os unknown
RL1[is.na(RL1$Utilization)]
#another way to add component <- add all hours where utilization os unknown
RL1[is.na(RL1$Utilization),]
is.na(RL1$Utilization)
#another way to add component <- add all hours where utilization os unknown
RL1[is.na(RL1$Utilization),"PosixTime"]
#another way to add component <- add all hours where utilization os unknown
list_rl1$UnknownHours <- RL1[is.na(RL1$Utilization),"PosixTime"]
list_rl1
list_rl1[15] <- "New Information"
list_rl1
list_rl1[4] <- "New Information"
list_rl1
list_rl1 <- list("RL1",util_stats_rl1,util_under_90_flag)
list_rl1
list_rl1
list_rl1[4] <- "New Information"
list_rl1
list_rl1 <- list(Machine="RL1",
Stats=util_stats_rl1,
LowThreshold=util_under_90_flag)
list_rl1
list_rl1
list_rl1[4] <- "New Information"
list_rl1
list_rl1$UnknownHours <- RL1[is.na(RL1$Utilization),"PosixTime"]
list_rl1
#delete element from list
list_rl1[4] <- NULL
list_rl1
#add df to list
RL1
list_rl1$Data <- RL1
list_rl1
#subsetting list
list_rl1[1:3]
#subsetting list
list_rl1[1:6]
#subsetting list <- access the first element of UnknownHours
list_rl1
#subsetting list <- access the first element of UnknownHours
list_rl1$UnknownHours[1]
list_rl1[[3]]
list_rl1[[4]]
list_rl1[[4]][1]
#subsetting list <- access the first element of UnknownHours in two versions
list_rl1$UnknownHours[1]
list_rl1[[4]][1]
#subsetting list
list_rl1[c(1:10)]
#subsetting list
list_rl1[1]
#subsetting list
list_rl1[1:2]
#subsetting list
typeof(list_rl1[1:2])
#visualization
library(ggplot2)
plot <- ggplot(data=util)
plot+geom_line(aes(x=PosixTime,y=Utilization))
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine))
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90,
color="Gray",
size=1.2)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90,
color="Gray",
size=1.2,
linetype=3)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90)
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90,
color="Gray")
plot+geom_line(aes(x=PosixTime,y=Utilization,
color=Machine),size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90,
color="Gray",
size=1.2)
Chicago <- read.csv("/Users/birobalint/Downloads/Weather Data/Chicago-F.csv",
row.names=1)
head(Chicago)
Chicago <- read.csv("/Users/birobalint/Downloads/Weather Data/Chicago-F.csv",
row.names=1)
NewYork <- read.csv("/Users/birobalint/Downloads/Weather Data/NewYork-F.csv",
row.names=1)
Houston <- read.csv("/Users/birobalint/Downloads/Weather Data/Houston-F.csv",
row.names=1)
SanFrancisco <- read.csv("/Users/birobalint/Downloads/Weather Data/SanFrancisco-F.csv",
row.names=1)
head(Chicago,n=2)
head(NewYork,n=2)
head(Houston,n=2)
head(SanFrancisco,n=2)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
is.matrix(Chicago)
is.matrix(NewYork)
is.matrix(Houston)
is.matrix(SanFrancisco)
#load matrices into a list
Weather <- list(Chicago=Chicago,
NewYork=NewYork,
Houston=Houston,
SanFrancisco=SanFrancisco)
#test our list
Weather[[3]]
#test our list
Weather[3]
#test our list
Weather$Houston
?apply
apply(x=Chicago,
MARGIN=1,
FUN=mean())
apply(Chicago,
MARGIN=1,
FUN=mean())
apply(Chicago,1,mean)
apply(Chicago,1,mean())
apply(x=Chicago,MARGIN=1,FUN=mean)
apply(x=Chicago,margin=1,fun=mean)
apply(Chicago,margin=1,fun=mean)
apply(Chicago,1,fun=mean)
apply(Chicago,1,mean)
#the syntax is apply(matrix, row/column, function)
apply(Chicago,1,max)
#the syntax is apply(matrix, row/column, function)
apply(Chicago,1,min)
apply(Chicago,1,mean)
apply(NewYork,1,mean)
apply(Houston,1,mean)
apply(SanFrancisco,1,mean)
#read data
Chicago <- read.csv("/Users/birobalint/Downloads/Weather Data/Chicago-F.csv",
row.names=1)
NewYork <- read.csv("/Users/birobalint/Downloads/Weather Data/NewYork-F.csv",
row.names=1)
Houston <- read.csv("/Users/birobalint/Downloads/Weather Data/Houston-F.csv",
row.names=1)
SanFrancisco <- read.csv("/Users/birobalint/Downloads/Weather Data/SanFrancisco-F.csv",
row.names=1)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#load matrices into a list
Weather <- list(Chicago=Chicago,
NewYork=NewYork,
Houston=Houston,
SanFrancisco=SanFrancisco)
Chicago
t(Chicago)
#apply transpose t() function to all elements of my Weather list
list(t(Weather$Chicago)
t(Weather$NewYork)
#apply transpose t() function to all elements of my Weather list
list(t(Weather$Chicago),
t(Weather$NewYork),
t(Weather$Houston),
t(Weather$SanFrancisco))
#apply transpose t() function to all elements of my Weather list
lapply(Weather,t)
list(t(Weather$Chicago),
t(Weather$NewYork),
t(Weather$Houston),
t(Weather$SanFrancisco))==lapply(Weather,t)
lapply(Weather, rbind, NewRow=1:12)
#using lapply with []
lapply(Weather, "[",1,1)
#using lapply with []
lapply(Weather, "[",1,)
#read data
Chicago <- read.csv("/Users/birobalint/Downloads/Weather Data/Chicago-F.csv",
row.names=1)
NewYork <- read.csv("/Users/birobalint/Downloads/Weather Data/NewYork-F.csv",
row.names=1)
Houston <- read.csv("/Users/birobalint/Downloads/Weather Data/Houston-F.csv",
row.names=1)
SanFrancisco <- read.csv("/Users/birobalint/Downloads/Weather Data/SanFrancisco-F.csv",
row.names=1)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#load matrices into a list
Weather <- list(Chicago=Chicago,
NewYork=NewYork,
Houston=Houston,
SanFrancisco=SanFrancisco)
lapply(Weather,function(x) x[1,])
#in this case x is an element of a list
lapply(Weather,function(x) x)
#in this case x is an element of a list
lapply(Weather,function(x) x[1,] - x[2,])
#read data
Chicago <- read.csv("/Users/birobalint/Downloads/Weather Data/Chicago-F.csv",
row.names=1)
NewYork <- read.csv("/Users/birobalint/Downloads/Weather Data/NewYork-F.csv",
row.names=1)
Houston <- read.csv("/Users/birobalint/Downloads/Weather Data/Houston-F.csv",
row.names=1)
SanFrancisco <- read.csv("/Users/birobalint/Downloads/Weather Data/SanFrancisco-F.csv",
row.names=1)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#load matrices into a list
Weather <- list(Chicago=Chicago,
NewYork=NewYork,
Houston=Houston,
SanFrancisco=SanFrancisco)
Weather
lapply(Weather,"[",1,7)
#AvgHigh_F for July with sapply() function
sapply(Weather,"[",1,7)
lapply(Weather,"[",1,10:12)
sapply(Weather,"[",1,10:12)
lapply(Weather,"[",1,10:12)
sapply(Weather,"[",1,10:12)
lapply(Weather,function(x) round((z[1,]-z[2,])/z[2,],2))
lapply(Weather,function(x) round((x[1,]-z[2,])/z[2,],2))
lapply(Weather,function(x) round((x[1,]-x[2,])/x[2,],2))
lapply(Weather,function(x) round((x[1,]-x[2,])/x[2,],2))
sapply(Weather,function(x) round((x[1,]-x[2,])/x[2,],2))
#it is possible to unable sapply() from simplification
#in this case it behaves as lapply() function
lapply(Weather,function(x) round((x[1,]-x[2,])/x[2,],2))
sapply(Weather,function(x) round((x[1,]-x[2,])/x[2,],2), simplify=FALSE)
#read data
Chicago <- read.csv("/Users/birobalint/Downloads/Weather Data/Chicago-F.csv",
row.names=1)
NewYork <- read.csv("/Users/birobalint/Downloads/Weather Data/NewYork-F.csv",
row.names=1)
Houston <- read.csv("/Users/birobalint/Downloads/Weather Data/Houston-F.csv",
row.names=1)
SanFrancisco <- read.csv("/Users/birobalint/Downloads/Weather Data/SanFrancisco-F.csv",
row.names=1)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#convert dfs to matrices
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#load matrices into a list
Weather <- list(Chicago=Chicago,
NewYork=NewYork,
Houston=Houston,
SanFrancisco=SanFrancisco)
Chicago
apply(Chicago,1,max)
#we would like to apply the above line to all the list elements
lapply(Weather,apply,1,max)
#this is identical of the above mentioned line (maybe a bit easier to understand!)
lapply(Weather, function(x) apply(x,1,max))
library(DESeq2)
print(getwd())
setwd('Documents/Projects/lda_rna_seq/code/')
gene_counts <- read.table('../results/gene_names_counts.csv')
gene_counts
head (gene_counts)
gene_counts <- read.table('../results/gene_names_counts.csv',
sep=',')
head(gene_counts)
gene_counts <- read.table('../results/gene_names_counts.csv',
sep=',',
header=FALSE)
head(gene_counts)
condition <- factor(rep('cow',11))
condition
timepoints <- factor(rep('t',11))
sampletable <- data.frame(condition=as.factor(condition),
timepoints=as.factor(timepoints))
colnames(gene_counts)
gene_counts <- read.table('../results/gene_names_counts.csv',
sep=',')
head(gene_counts)
gene_counts <- read.csv('../results/gene_names_counts.csv',
sep=',')
head(gene_counts)
metadata <- rbind(c('c','t','c','t','c','c','t','c','t','c','t'))
gene_counts
colnames(gene_counts)
colnames(gene_counts)[2:]
colnames(gene_counts)[-1]
colnames(gene_counts)[-1,-2]
colnames(gene_counts)[c(-1,-2)]
metadata <- rbind(idx=colnames(gene_counts)[c(-1,-2)],
dex=c('c','t','c','t','c','c','t','c','t','c','t'))
metadata
metadata <- cbind(idx=colnames(gene_counts)[c(-1,-2)],
dex=c('c','t','c','t','c','c','t','c','t','c','t'))
metadata
dds <- DESeqDataSetFromMatrix(countData=gene_counts,
colData=metaData,
design=~dex,)
head(gene_counts)
gene_counts[,1:]
gene_counts[,-1]
head(gene_counts[,-1])
gene_counts <- head(gene_counts[,-1])
gene_counts <- read.csv('../results/gene_names_counts.csv',
sep=',')
gene_counts <- gene_counts[,-1]
head(gene_counts)
metadata <- cbind(idx=colnames(gene_counts)[c(-1,-2)],
dex=c('c','t','c','t','c','c','t','c','t','c','t'))
metadata <- cbind(idx=colnames(gene_counts)[c(-1)],
dex=c('c','t','c','t','c','c','t','c','t','c','t'))
metadata
metadata[,'idx']
dds <- DESeqDataSetFromMatrix(countData=gene_counts,
colData=metaData,
design=metadata[,'dex'])
dds <- DESeqDataSetFromMatrix(countData=gene_counts,
colData=metadata,
design=metadata[,'dex'])
ncol(gene_counts)
ncol(metadata)
metadata <- rbind(idx=colnames(gene_counts)[c(-1)],
dex=c('c','t','c','t','c','c','t','c','t','c','t'))
dds <- DESeqDataSetFromMatrix(countData=gene_counts,
colData=metadata,
design=metadata[,'dex'])
ncol(gene_counts)
ncol(metadata)
metadata
gene_counts
colnames(gene_counts)
colnames(metada)
metadata
dds <- DESeqDataSetFromMatrix(countData=gene_counts,
colData=colnames(gene_counts),
design=c('c','t','c','t','c','c','t','c','t','c','t'))
colnames(gene_counts)
dds <- DESeqDataSetFromMatrix(countData=gene_counts,
colData=colnames(gene_counts[,-1]),
design=c('c','t','c','t','c','c','t','c','t','c','t'))
head(gene_counts)
colnames(gene_counts[,-1])
colnames(gene_counts)
colnames(gene_counts[,-1])
metadata <- rbind(idx=colnames(gene_counts)[c(-1)],
dex=c('c','t','c','t','c','c','t','c','t','c','t'))
metadata
metadata <- cbind(idx=colnames(gene_counts)[c(-1)],
dex=c('c','t','c','t','c','c','t','c','t','c','t'))
metadata
dds <- DESeqDataSetFromMatrix(countData=gene_counts,
colData=metadata[,'idx'],
design=metadata[,'dex'])
dds <- DESeqDataSetFromMatrix(countData=gene_counts,
colData=metadata,
design=metadata[,'dex'])
ncol(gene_counts)
nrow(metadata)
dds <- DESeqDataSetFromMatrix(countData=gene_counts,
colData=metadata,
design=metadata[,'dex'], tidy=TRUE)
metadata <- cbind(idx=colnames(gene_counts)[c(-1)],
dex=as.matrix(c('c','t','c','t','c','c','t','c','t','c','t')))
dds <- DESeqDataSetFromMatrix(countData=gene_counts,
colData=metadata,
design=metadata[,'dex'], tidy=TRUE)
metadata <- cbind(idx=colnames(gene_counts)[c(-1)],
dex=c('c','t','c','t','c','c','t','c','t','c','t'))
dds <- DESeqDataSetFromMatrix(countData=gene_counts,
colData=metadata,
design=metadata[,'dex'], tidy=TRUE)
metadata <- cbind(idx=colnames(gene_counts)[c(-1)],
dex=c('c','t','c','t','c','c','t','c','t','c','t'))
metadata
metadata <- as.matrix(cbind(idx=colnames(gene_counts)[c(-1)],
dex=c('c','t','c','t','c','c','t','c','t','c','t')))
metada
metadata
metadata <- as.data.frame(cbind(idx=colnames(gene_counts)[c(-1)],
dex=c('c','t','c','t','c','c','t','c','t','c','t')))
metada
metadata
dds <- DESeqDataSetFromMatrix(countData=gene_counts,
colData=metadata,
design=metadata[,'dex'], tidy=TRUE)
dds <- DESeqDataSetFromMatrix(countData=gene_counts,
colData=metadata,
design=metadata$dex, tidy=TRUE)
dds <- DESeqDataSetFromMatrix(countData=gene_counts,
colData=metadata,
design=~dex, tidy=TRUE)
dds <- DESeq(dds)
res <- results(dds)
head(results(dds, tidy=TRUE))
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-5,5)))
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-6,6)))
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-7,7)))
vsdata <- vst(dds, blind=FALSE)
plotPCA(vsdata, intgroup="dex")
d.dds <- DESeq(dds)
vsdata <- varianceStabilizingTransformation(d.dds)
plotPCA(vsdata,intgroup=c('dex'))
library(gplots)
BiocManager::install("gplots")
BiocManager::install("gplots")
library(gplots)
vstable <- as.data.frame(assay(vsdata))
vstable_rowsum <- transform(vstable,sum=rowSums(vstable))
selected <- order(vstable_rowsum$sum, decreasing = TRUE)[1:100]
heatmap.2(as.matrix(vstable[selected,]), row=FALSE, dendrogram = 'column', col=redgreen(75), scale='raw',
key=TRUE, keysize=1.5,
density.info = 'none',trace='none',cexCol = 0.9,labRow = NA)
heatmap.2(as.matrix(vstable[selected,]), row=FALSE, dendrogram = 'column', col=redgreen(75),
key=TRUE, keysize=1.5,
density.info = 'none',trace='none',cexCol = 0.9,labRow = NA)
pca <- plotPCA(vsdata, intgroup="dex")
heatmap <- heatmap.2(as.matrix(vstable[selected,]), row=FALSE, dendrogram = 'column', col=redgreen(75),
key=TRUE, keysize=1.5,
density.info = 'none',trace='none',cexCol = 0.9,labRow = NA)
View(pca)
heatmap
pca
